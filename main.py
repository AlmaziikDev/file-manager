import os
import logging
import json
import zipfile
import fnmatch
import re
from datetime import datetime, timedelta
from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackContext,
    MessageHandler,
    filters,
)
import shutil
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")

# –í–∞—à –∞–π–¥–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.getLogger("httpx").setLevel(logging.WARNING)

# –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
LOG_FILE = os.getenv("LOG_FILE")

# –§–∞–π–ª –¥–ª—è –±–∞–∑—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
SETTINGS_DB_FILE = os.getenv("SETTINGS_DB_FILE")

# –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_settings = {}

# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
EMOJI_MAP = {
    ".appinstaller": "üì•",
    ".torrent": "üì•",
    ".sql": "üóÑÔ∏è",
    ".txt": "üìÑ",
    ".jpg": "üñºÔ∏è",
    ".png": "üñºÔ∏è",
    ".mp3": "üéµ",
    ".mp4": "üé•",
    ".pdf": "üìñ",
    ".zip": "üì¶",
    ".rar": "üì¶",
    ".gz": "üì¶",
    ".exe": "‚öôÔ∏è",
    ".msi": "üñ•Ô∏è",
    ".py": "üêç",
    ".luac": "üåô",
    ".lua": "üåô",
    ".jar": "‚òï",
    ".json": "üîß",
    ".md": "üìù",
    ".docx": "üìã",
    ".doc": "üìã",
    ".xlsx": "üìä",
    ".pptx": "üìä",
    ".csv": "üìä",
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_dirs = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_settings_db():
    global user_settings
    if os.path.exists(SETTINGS_DB_FILE):
        try:
            with open(SETTINGS_DB_FILE, "r", encoding="utf-8") as f:
                user_settings = json.load(f)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: %s", e)
            user_settings = {}
    else:
        user_settings = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª
def save_settings_db():
    with open(SETTINGS_DB_FILE, "w", encoding="utf-8") as f:
        json.dump(user_settings, f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_current_dir(user_id):
    return current_dirs.get(str(user_id), os.getcwd())

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    uid = str(user_id)
    if uid not in user_settings:
        user_settings[uid] = {
            "default_path": None,
            "filtering": "off",  # —Ä–µ–∂–∏–º—ã: "off", "name", "date"
            "grouping": "off",  # —Ä–µ–∂–∏–º—ã: "off", "date"
        }
        save_settings_db()
    return user_settings[uid]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
def log_action(user_id, command, details):
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "command": command,
        "details": details,
    }
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] [User ID: {user_id}] - {command} {details}")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %s", e)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def send_message_and_log(update: Update, text: str, command: str, details: dict):
    await update.message.reply_text(text)
    log_action(update.effective_user.id, command, details)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
def get_date_group(mod_time: float) -> str:
    dt = datetime.fromtimestamp(mod_time)
    today = datetime.today()
    if dt.date() == today.date():
        return "–°–µ–≥–æ–¥–Ω—è"
    # –ï—Å–ª–∏ –≤ —Ç–æ–π –∂–µ –Ω–µ–¥–µ–ª–µ (–Ω–æ –Ω–µ —Å–µ–≥–æ–¥–Ω—è)
    if dt.isocalendar()[1] == today.isocalendar()[1] and dt.date() < today.date():
        return "–†–∞–Ω–µ–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
    # –ï—Å–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ
    if dt.isocalendar()[1] == (today.isocalendar()[1] - 1):
        return "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ"
    # –ï—Å–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
    if dt.year == today.year and dt.month == today.month:
        return "–†–∞–Ω–µ–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ
    last_month = today.month - 1 if today.month > 1 else 12
    last_month_year = today.year if today.month > 1 else today.year - 1
    if dt.year == last_month_year and dt.month == last_month:
        return "–í –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ"
    return "–î–∞–≤–Ω–æ"

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
def authorized_only(func):
    async def wrapper(update: Update, context: CallbackContext):
        if update.effective_user.id != AUTHORIZED_USER_ID:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        return await func(update, context)

    return wrapper

# –ö–æ–º–∞–Ω–¥–∞ /create
@authorized_only
async def create_file(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create <–∏–º—è_—Ñ–∞–π–ª–∞> \"—Ç–µ–∫—Å—Ç\" (–ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)")
        return
    file_name = context.args[0]
    content = "\n".join(context.args[1:])
    current_dir = get_current_dir(user_id)
    full_path = os.path.join(current_dir, file_name)
    try:
        with open(full_path, "w", encoding="utf-8") as f:
            f.write(content)
        await send_message_and_log(update, f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_name}", "create", {"file": full_path, "content": content})
    except Exception as e:
        await send_message_and_log(update, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", "create", {"error": str(e), "file": full_path})

# –ö–æ–º–∞–Ω–¥–∞ /edit
@authorized_only
async def edit_file(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit <–∏–º—è_—Ñ–∞–π–ª–∞> \"—Ç–µ–∫—Å—Ç\" (–ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)")
        return
    file_name = context.args[0]
    content = "\n".join(context.args[1:])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    current_dir = get_current_dir(user_id)
    full_path = os.path.join(current_dir, file_name)
    if not os.path.isfile(full_path):
        await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        with open(full_path, "w", encoding="utf-8") as f:
            f.write(content)
        await update.message.reply_text(f"–§–∞–π–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω: {file_name}")
        log_action(user_id, "edit", {"file": full_path, "content": content})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        log_action(user_id, "edit", {"error": str(e), "file": full_path})

# –ö–æ–º–∞–Ω–¥–∞ /view
@authorized_only
async def view_file(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view <–∏–º—è_—Ñ–∞–π–ª–∞>")
        return
    file_name = ' '.join(context.args)
    current_dir = get_current_dir(user_id)
    full_path = os.path.join(current_dir, file_name)
    if not os.path.isfile(full_path):
        await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        with open(full_path, "r", encoding="utf-8") as f:
            content = f.read()
        # –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
        MAX_MESSAGE_LENGTH = 4096
        messages = []
        buffer = ""
        lines = content.split("\n")
        for line in lines:
            escaped_line = escape_markdown_v2(line)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            if len(buffer) + len(escaped_line) + 1 > MAX_MESSAGE_LENGTH:
                if buffer.startswith("```") and not buffer.endswith("```"):
                    buffer += "\n```"  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
                messages.append(buffer)
                buffer = ""
            buffer += escaped_line + "\n"
        if buffer:
            if buffer.startswith("```") and not buffer.endswith("```"):
                buffer += "\n```"  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            messages.append(buffer)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
        for i, message in enumerate(messages):
            if i == 0:
                text = f"{file_name}\n```\n{message}\n```"
            else:
                text = f"```\n{message}\n```"
            await update.message.reply_text(text, parse_mode="Markdown")
        log_action(user_id, "view", {"file": full_path})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
        log_action(user_id, "view", {"error": str(e), "file": full_path})

def escape_markdown_v2(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
    """
    reserved_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(reserved_chars)}])", r"\\\1", text)

@authorized_only
async def search(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    query = ' '.join(context.args)
    if not query:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–∞—Å–∫–∞>")
        return
    current_dir = get_current_dir(user_id)
    results = {}
    try:
        # –†–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        depth = 1000  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        file_type = None
        regex_mode = False
        content_search = False
        sort_by = "name"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        if "--depth=" in query:
            depth_str = query.split("--depth=")[1].split()[0]
            depth = int(depth_str)
            query = query.replace(f"--depth={depth_str}", "").strip()
        if "--type=" in query:
            file_type = query.split("--type=")[1].split()[0]
            query = query.replace(f"--type={file_type}", "").strip()
        if "--sort=" in query:
            sort_by = query.split("--sort=")[1].split()[0]
            query = query.replace(f"--sort={sort_by}", "").strip()
        if query.startswith("regex:"):
            regex_mode = True
            query = query[6:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "regex:"
        if query.startswith("content:"):
            content_search = True
            query = query[8:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "content:"
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        current_depth = 0
        for root, dirs, files in os.walk(current_dir):
            if current_depth > depth:
                break
            for file in files:
                full_path = os.path.join(root, file)
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—É
                if file_type and not file.endswith(f".{file_type}"):
                    continue
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∞—Å–∫–µ
                if not regex_mode and fnmatch.fnmatch(file.lower(), query.lower()):
                    results.setdefault(root, []).append(file)
                    continue
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–º—è —Ñ–∞–π–ª–∞
                if not regex_mode and query.lower() in file.lower():
                    results.setdefault(root, []).append(file)
                    continue
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
                if regex_mode:
                    pattern = re.compile(query, re.IGNORECASE)
                    if pattern.match(file):
                        results.setdefault(root, []).append(file)
                        continue
                # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
                if content_search:
                    try:
                        with open(full_path, "r", encoding="utf-8") as f:
                            if query in f.read():
                                results.setdefault(root, []).append(file)
                    except Exception:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            current_depth += 1
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        if results:
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            sorted_results = {}
            for directory, files in results.items():
                if sort_by == "date":
                    sorted_files = sorted(
                        files,
                        key=lambda x: os.path.getmtime(os.path.join(directory, x)),
                        reverse=True
                    )
                else:
                    sorted_files = sorted(files, key=lambda x: x.lower())
                sorted_results[directory] = sorted_files
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        output_blocks = []
        for directory, files in sorted_results.items():
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            block = f"```\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}\n"
            block += "\n".join([
                f"{EMOJI_MAP.get(os.path.splitext(f)[1].lower(), 'üìÑ')} {escape_markdown_v2(f)}"
                for f in files
            ])
            block += "\n```"
            output_blocks.append(block)
        final_text = "\n".join(output_blocks)

        # –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
        MAX_MESSAGE_LENGTH = 4096
        messages = []
        buffer = ""
        for line in final_text.split("\n"):
            # –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º escape_markdown_v2 –∫ —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä–∫–¥–∞—É–Ω-—Ä–∞–∑–º–µ—Ç–∫—É
            if len(buffer) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                # –ï—Å–ª–∏ –±–ª–æ–∫ –æ—Ç–∫—Ä—ã—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                if buffer.startswith("```") and not buffer.endswith("```"):
                    buffer += "\n```"
                messages.append(buffer)
                buffer = ""
            buffer += line + "\n"
        if buffer:
            if buffer.startswith("```") and not buffer.endswith("```"):
                buffer += "\n```"
            messages.append(buffer)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
        for message in messages:
            await update.message.reply_text(message, parse_mode="Markdown")
        else:
            await update.message.reply_text("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        log_action(user_id, "search", {"query": query, "results": results})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        log_action(user_id, "search", {"error": str(e), "query": query})

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async def change_directory(update: Update, context: CallbackContext, path: str) -> None:
    user_id = update.effective_user.id
    current_dir = get_current_dir(user_id)
    if not path:
        await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã cd –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ /settings')
        return
    new_path = os.path.normpath(os.path.join(current_dir, path))
    if os.path.isdir(new_path):
        current_dirs[str(user_id)] = new_path
        await update.message.reply_text(f'–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_path}')
        log_action(user_id, "cd", {"from": current_dir, "to": new_path})
        return
    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if ('/' not in path) and ('\\' not in path):
        for folder in os.listdir(current_dir):
            full_folder_path = os.path.join(current_dir, folder)
            if os.path.isdir(full_folder_path) and folder.lower() == path.lower():
                current_dirs[str(user_id)] = full_folder_path
                await update.message.reply_text(f'–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {full_folder_path}')
                log_action(user_id, "cd", {"from": current_dir, "to": full_folder_path})
                return
    await update.message.reply_text('–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏

# –ö–æ–º–∞–Ω–¥–∞ /mv
@authorized_only
async def mv(update: Update, context: CallbackContext) -> None:
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç) —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mv <–∏—Å—Ç–æ—á–Ω–∏–∫> <–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>"""
    user_id = update.effective_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mv <–∏—Å—Ç–æ—á–Ω–∏–∫> <–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return
    src = context.args[0]
    dst = context.args[1]
    current_dir = get_current_dir(user_id)
    src_path = os.path.normpath(os.path.join(current_dir, src))
    dst_path = os.path.normpath(os.path.join(current_dir, dst))
    try:
        shutil.move(src_path, dst_path)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ shutil.move
        await update.message.reply_text(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {src} -> {dst}")
        log_action(user_id, "mv", {"src": src_path, "dst": dst_path})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")

@authorized_only
async def cp(update: Update, context: CallbackContext) -> None:
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cp <–∏—Å—Ç–æ—á–Ω–∏–∫> <–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>"""
    user_id = update.effective_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cp <–∏—Å—Ç–æ—á–Ω–∏–∫> <–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return
    src = context.args[0]
    dst = context.args[1]
    current_dir = get_current_dir(user_id)
    src_path = os.path.normpath(os.path.join(current_dir, src))
    dst_path = os.path.normpath(os.path.join(current_dir, dst))
    try:
        if os.path.isfile(src_path):
            shutil.copy2(src_path, dst_path)
        elif os.path.isdir(src_path):
            shutil.copytree(src_path, dst_path)
        else:
            await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await update.message.reply_text(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {src} -> {dst}")
        log_action(user_id, "cp", {"src": src_path, "dst": dst_path})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@authorized_only
async def rm(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rm <–ø—É—Ç—å>"""
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rm <–ø—É—Ç—å>")
        return
    target = ' '.join(context.args)
    current_dir = get_current_dir(user_id)
    target_path = os.path.normpath(os.path.join(current_dir, target))
    try:
        if os.path.isfile(target_path):
            os.remove(target_path)
        elif os.path.isdir(target_path):
            shutil.rmtree(target_path)
        else:
            await update.message.reply_text("–§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {target}")
        log_action(user_id, "rm", {"target": target_path})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

@authorized_only
async def mkdir(update: Update, context: CallbackContext) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mkdir <–∏–º—è_–ø–∞–ø–∫–∏>"""
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mkdir <–∏–º—è_–ø–∞–ø–∫–∏>")
        return
    folder_name = ' '.join(context.args)
    current_dir = get_current_dir(user_id)
    folder_path = os.path.normpath(os.path.join(current_dir, folder_name))
    try:
        os.makedirs(folder_path, exist_ok=False)
        await update.message.reply_text(f"–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder_name}")
        log_action(user_id, "mkdir", {"folder": folder_path})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")

@authorized_only
async def rmdir(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rmdir <–∏–º—è_–ø–∞–ø–∫–∏>"""
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rmdir <–∏–º—è_–ø–∞–ø–∫–∏>")
        return
    folder_name = ' '.join(context.args)
    current_dir = get_current_dir(user_id)
    folder_path = os.path.normpath(os.path.join(current_dir, folder_name))
    try:
        os.rmdir(folder_path)
        await update.message.reply_text(f"–ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {folder_name}")
        log_action(user_id, "rmdir", {"folder": folder_path})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")

# –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã

@authorized_only
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    current_dirs[str(user_id)] = os.getcwd()  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
    log_action(user_id, "start", {"cwd": os.getcwd()})

@authorized_only
async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/pwd - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
        "/ls - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n"
        "/cd <–ø—É—Ç—å> - –°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äì –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)\n"
        "/back - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ\n"
        "/download <–∏–º—è_—Ñ–∞–π–ª–∞> - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n"
        "/search --depth=(–≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞) --type=(—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞) --sort=(date) regex: (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è) content: (–ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É) <—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–∞—Å–∫–∞>\n\n"
        "/view <–∏–º—è —Ñ–∞–π–ª–∞> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞\n"
        "/create <–∏–º—è_—Ñ–∞–π–ª–∞> \"—Ç–µ–∫—Å—Ç\"\n"
        "/edit <–∏–º—è_—Ñ–∞–π–ª–∞> \"–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç\"\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞)\n"
        "/mv <src> <dst> - –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å\n"
        "/cp <src> <dst> - –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n"
        "/rm <–ø—É—Ç—å> - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É\n"
        "/mkdir <–∏–º—è> - –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É\n"
        "/rmdir <–∏–º—è> - –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É\n"
        "\n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª–µ—à–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: cd SomeGame"
    )
    await update.message.reply_text(help_text)
    log_action(update.effective_user.id, "help", {})

@authorized_only
async def pwd(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    current_dir = get_current_dir(user_id)
    await update.message.reply_text(f'–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}')
    log_action(user_id, "pwd", {"cwd": current_dir})

# –ö–æ–º–∞–Ω–¥–∞ /download (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ZIP)
@authorized_only
async def download_file(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    files = context.args
    if not files:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è(—è) —Ñ–∞–π–ª–∞(–æ–≤) –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /download")
        return

    current_dir = get_current_dir(user_id)
    zip_path = os.path.join(current_dir, f"user_{user_id}_files.zip")

    # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤
    with zipfile.ZipFile(zip_path, "w") as zipf:
        for file_name in files:
            full_path = os.path.join(current_dir, file_name)
            if os.path.isfile(full_path):
                zipf.write(full_path, arcname=file_name)
            else:
                await update.message.reply_text(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP-–∞—Ä—Ö–∏–≤
    if os.path.getsize(zip_path) > 0:
        with open(zip_path, "rb") as zf:
            await update.message.reply_document(document=zf, filename="files.zip")
        log_action(user_id, "download", {"files": files})
    else:
        await update.message.reply_text("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP-—Ñ–∞–π–ª
    os.remove(zip_path)

# –ö–æ–º–∞–Ω–¥–∞ /ls
@authorized_only
async def ls(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    current_dir = get_current_dir(user_id)
    try:
        items = os.listdir(current_dir)
        item_list = []
        for item in items:
            full_path = os.path.join(current_dir, item)
            is_dir = os.path.isdir(full_path)
            mtime = os.path.getmtime(full_path)
            ext = os.path.splitext(item)[1].lower()
            emoji = EMOJI_MAP.get(ext, "üìÑ") if not is_dir else "üìÇ"
            item_list.append({"name": item, "is_dir": is_dir, "mtime": mtime, "emoji": emoji})
        settings = get_user_settings(user_id)
        filtering = settings.get("filtering", "off")
        grouping = settings.get("grouping", "off")
        if filtering == "name":
            item_list.sort(key=lambda x: x["name"].lower())
        elif filtering == "date":
            item_list.sort(key=lambda x: x["mtime"], reverse=True)
        else:
            item_list.sort(key=lambda x: x["name"].lower())
        if grouping == "date":
            groups = {}
            now = datetime.now()
            date_ranges = {
                "–°–µ–≥–æ–¥–Ω—è": now.date(),
                "–†–∞–Ω–µ–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ": now.date() - timedelta(days=now.weekday()),
                "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ": now.date() - timedelta(days=now.weekday() + 7),
                "–†–∞–Ω–µ–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ": now.replace(day=1).date(),
                "–í –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ": (now.replace(day=1) - timedelta(days=1)).replace(day=1).date(),
                "–î–∞–≤–Ω–æ": datetime.min.date(),
            }
            for item in item_list:
                item_date = datetime.fromtimestamp(item["mtime"]).date()
                for label, start_date in date_ranges.items():
                    if item_date >= start_date:
                        groups.setdefault(label, []).append(item)
                        break
            output_blocks = []
            for label in date_ranges.keys():
                if label in groups:
                    block = f"```\n{label}:\n"
                    block += "\n".join([f"  {item['emoji']} {item['name']}" for item in groups[label]])
                    block += "\n```"
                    output_blocks.append(block)
            final_text = "\n".join(output_blocks)
        else:
            folders = [f"{item['emoji']} {item['name']}" for item in item_list if item["is_dir"]]
            files = [f"{item['emoji']} {item['name']}" for item in item_list if not item["is_dir"]]
            block1 = "```\nFolders:\n" + "\n".join(folders) + "\n```" if folders else ""
            block2 = "```\nFiles:\n" + "\n".join(files) + "\n```" if files else ""
            final_text = "\n".join(filter(None, [block1, block2]))
        await update.message.reply_text(final_text, parse_mode="Markdown")
        log_action(user_id, "ls", {"cwd": current_dir, "items": items})
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        log_action(user_id, "ls", {"error": str(e)})

@authorized_only
async def cd(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if not context.args:
        settings = get_user_settings(user_id)
        default_path = settings.get("default_path")
        if default_path:
            await change_directory(update, context, default_path)
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã cd –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ /settings")
        return
    path = ' '.join(context.args)
    await change_directory(update, context, path)

@authorized_only
async def back(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    current_dir = get_current_dir(user_id)
    parent_dir = os.path.dirname(current_dir)
    if parent_dir and parent_dir != current_dir:
        current_dirs[str(user_id)] = parent_dir
        await update.message.reply_text(f'–¢–µ–ø–µ—Ä—å –≤—ã –≤: {parent_dir}')
        log_action(user_id, "back", {"from": current_dir, "to": parent_dir})
    else:
        await update.message.reply_text('–í—ã —É–∂–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.')

@authorized_only
async def settings_command(update: Update, context: CallbackContext) -> None:
    """
    /settings –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äì –≤—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã:
      ‚Ä¢ default_path <–ø—É—Ç—å> ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è cd (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤).
      ‚Ä¢ filtering <name/date/off> ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
      ‚Ä¢ grouping <date/off> ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.
    """
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    args = context.args
    if not args:
        text = "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        text += f"–î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å: {settings.get('default_path')}\n"
        text += f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {settings.get('filtering')}\n"
        text += f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {settings.get('grouping')}\n"
        text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        text += "/settings default_path <–ø—É—Ç—å>\n"
        text += "/settings filtering <name/date/off>\n"
        text += "/settings grouping <date/off>\n"
        await update.message.reply_text(text)
        log_action(user_id, "settings", {"action": "show", "settings": settings})
        return
    subcommand = args[0].lower()
    if subcommand == "default_path":
        if len(args) < 2:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /settings default_path D:\\Games")
        else:
            new_default = " ".join(args[1:])
            settings["default_path"] = new_default
            await update.message.reply_text(f"–î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_default}")
            log_action(user_id, "settings", {"default_path": new_default})
            save_settings_db()
    elif subcommand == "filtering":
        if len(args) < 2:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: name, date –∏–ª–∏ off, –Ω–∞–ø—Ä–∏–º–µ—Ä: /settings filtering name")
            return
        mode = args[1].lower()
        if mode not in ("name", "date", "off"):
            await update.message.reply_text("–†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: name, date –∏–ª–∏ off")
            return
        settings["filtering"] = mode
        await update.message.reply_text(f"–†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode}")
        log_action(user_id, "settings", {"filtering": mode})
        save_settings_db()
    elif subcommand == "grouping":
        if len(args) < 2:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: date –∏–ª–∏ off, –Ω–∞–ø—Ä–∏–º–µ—Ä: /settings grouping date")
            return
        mode = args[1].lower()
        if mode not in ("date", "off"):
            await update.message.reply_text("–†–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: date –∏–ª–∏ off")
            return
        settings["grouping"] = mode
        await update.message.reply_text(f"–†–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode}")
        log_action(user_id, "settings", {"grouping": mode})
        save_settings_db()
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ default_path, filtering –∏–ª–∏ grouping.")
        log_action(user_id, "settings", {"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "args": args})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ —Å–ª–µ—à–∞)
@authorized_only
async def text_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text.strip()
    if not text:
        return
    parts = text.split()
    command = parts[0].lower()
    args = parts[1:]
    context.args = args  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    if command == 'cd':
        await cd(update, context)
    elif command == 'ls':
        await ls(update, context)
    elif command == 'pwd':
        await pwd(update, context)
    elif command == 'help':
        await help_command(update, context)
    elif command == 'back':
        await back(update, context)
    elif command == 'download':
        await download_file(update, context)
    elif command == 'search':
        await search(update, context)
    elif command == 'view':
        await view_file(update, context)
    elif command == 'create':
        await create_file(update, context)
    elif command == 'edit':
        await edit_file(update, context)
    elif command == 'settings':
        await settings_command(update, context)
    elif command == 'mv':
        await mv(update, context)
    elif command == 'cp':
        await cp(update, context)
    elif command == 'rm':
        await rm(update, context)
    elif command == 'mkdir':
        await mkdir(update, context)
    elif command == 'rmdir':
        await rmdir(update, context)
    else:
        await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')
        log_action(update.effective_user.id, "unknown", {"text": text})

def main() -> None:
    load_settings_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("pwd", pwd))
    app.add_handler(CommandHandler("ls", ls))
    app.add_handler(CommandHandler("cd", cd))
    app.add_handler(CommandHandler("back", back))
    app.add_handler(CommandHandler("download", download_file))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("view", view_file))
    app.add_handler(CommandHandler("create", create_file))
    app.add_handler(CommandHandler("edit", edit_file))
    app.add_handler(CommandHandler("settings", settings_command))
    app.add_handler(CommandHandler("mv", mv))
    app.add_handler(CommandHandler("cp", cp))
    app.add_handler(CommandHandler("rm", rm))
    app.add_handler(CommandHandler("mkdir", mkdir))
    app.add_handler(CommandHandler("rmdir", rmdir))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_handler))

    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("pwd", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"),
        BotCommand("ls", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"),
        BotCommand("cd", "–°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"),
        BotCommand("back", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ"),
        BotCommand("download", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"),
        BotCommand("search", "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"),
        BotCommand("create", "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"),
        BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"),
        BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("mv", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"),
        BotCommand("cp", "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"),
        BotCommand("rm", "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"),
        BotCommand("mkdir", "–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"),
        BotCommand("rmdir", "–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É")
    ]
    loop = asyncio.get_event_loop()
    loop.run_until_complete(app.bot.set_my_commands(commands))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()